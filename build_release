#!/bin/bash
#
# CDDL HEADER START
#
# This file and its contents are supplied under the terms of the
# # Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# CDDL HEADER END
#
# Copyright 2022 Saso Kiselkov. All rights reserved.

function my_realpath() {
	[[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

OUTPUT_DIR="OpenGPWS"
OS="$(uname)"
case "$OS" in
Darwin)
	INSTALL="install -m 644"
	REALPATH=my_realpath
	;;
*)
	INSTALL="install -D -m 644"
	REALPATH=realpath
	;;
esac

NOAUDIO=0

while getopts "AGa:hn" o; do
	case "${o}" in
	A)
		NOAUDIO=1
		;;
	h)
		cat << EOF
Usage: $0 -a <libacfutils> [-AGhn]
    -a <libacfutils> : path to built libacfutils repo
    -A : disable audio generation entirely
    -G : include Garmin audio instead of Honeywell audio
    -h : show this help screen
    -n : (macOS-only) Codesign & notarize the resulting XPL after build
     Note: requires that you create a file named user.make in the
     notarize directory with DEVELOPER_USERNAME and DEVELOPER_PASSWORD
     set. See notarize/notarize.make for more information.
EOF
		exit
		;;
	G)
		GARMIN=1
		;;
	a)
		LIBACFUTILS="$(${REALPATH} "$OPTARG")"
		;;
	n)
		if [[ $(uname) != "Darwin" ]]; then
			echo "Codesigning and notarization can only be done" \
			    "on macOS" >&2
			exit 1
		fi
		NOTARIZE=1
		;;
	esac
done

if [ -z "$LIBACFUTILS" ]; then
	echo "Missing mandatory argument -a." \
	    "Try $0 -h for more information" >&2
	exit 1
fi

if ! opusenc -h &> /dev/null ; then
	echo "Couldn't find \"opusenc\" command." \
	    "Please install \"opus-tools\"" >&2
	exit 1
fi

set -e

rm -rf "$OUTPUT_DIR" "$OUTPUT_DIR.zip"
mkdir -p "$OUTPUT_DIR"

if [[ "$OS" = "Darwin" ]]; then
	NCPUS=$(( $(sysctl -n hw.ncpu) + 1 ))
	( cd src && cmake . -DLIBACFUTILS="${LIBACFUTILS}" \
	    -DNOAUDIO=${NOAUDIO} -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" && \
	    make -j "$NCPUS" ) || exit 1
	if [ -n "${NOTARIZE}" ]; then
		make -f notarize/notarize.make notarize
	fi
else
	NCPUS=$(( $(grep 'processor[[:space:]]\+:' /proc/cpuinfo  | wc -l) + \
	    1 ))
	( cd src && rm -f CMakeCache.txt && \
	    cmake . -DLIBACFUTILS="${LIBACFUTILS}" -DNOAUDIO=${NOAUDIO} && \
	    make -j "${NCPUS}" ) || exit 1
	( cd src && rm -f CMakeCache.txt && \
	    cmake . -DLIBACFUTILS="${LIBACFUTILS}" -DNOAUDIO=${NOAUDIO}  \
	    -DCMAKE_TOOLCHAIN_FILE=XCompile.cmake \
	    -DHOST=x86_64-w64-mingw32 && \
	    make -j "${NCPUS}" && \
	    "$LIBACFUTILS/tools/mksyms" \
	    "../$OUTPUT_DIR/win_x64/$OUTPUT_DIR.xpl" > \
	    "../$OUTPUT_DIR/win_x64/syms.txt" ) || exit 1
fi

if [[ $(uname) = "Linux" ]]; then
	"$LIBACFUTILS/tools/mksyms" "$OUTPUT_DIR/win_x64/OpenGPWS.xpl" > \
	    "$OUTPUT_DIR/win_x64/syms.txt"
else
	# MacOS "install" is such a pile of trash that it can't create
	# directories automatically while copying files, so we need to
	# hold its hand and do it manually.
	mkdir -p "$OUTPUT_DIR/mac_x64" \
	    "$OUTPUT_DIR/data/garmin" \
	    "$OUTPUT_DIR/data/ra/garmin" \
	    "$OUTPUT_DIR/data/ra/boeing" \
	    "$OUTPUT_DIR/opengpws"
fi

if [[ "$NOAUDIO" != 1 ]]; then
	find data -iname '*.flac' | fgrep -v '/src/' | while read; do
		if ! [ -f "${REPLY/%.flac/.opus}" ]; then
			opusenc --bitrate 32 "${REPLY}" "${REPLY/%.flac/.opus}"
		fi
	done
fi

if [ -z "$GARMIN" ]; then
	find data -iname '*.opus' -or -iname '*.vert' -or -iname '*.frag' | \
	    while read; do
		$INSTALL -- "$REPLY" "$OUTPUT_DIR/$REPLY"
	done
else
	find data -iname '*.vert' -or -iname '*.frag' | while read; do
		$INSTALL -- "$REPLY" "$OUTPUT_DIR/$REPLY"
	done
	if [[ "$NOAUDIO" != 1 ]]; then
		for FILE in data/*.opus; do
			$INSTALL -- "$FILE" "$OUTPUT_DIR/$FILE"
		done
		find data/ra -iname '*.opus' | while read; do
			$INSTALL -- "$REPLY" "$OUTPUT_DIR/$REPLY"
		done
		find data/garmin -iname '*.opus' | while read; do
			$INSTALL -- "$REPLY" "$OUTPUT_DIR/data"
		done
	fi
fi

$INSTALL -- "api/opengpws/xplane_api.h" "$OUTPUT_DIR/opengpws/xplane_api.h"

# ZIP up the product
zip -r "$OUTPUT_DIR.zip" "$OUTPUT_DIR"
